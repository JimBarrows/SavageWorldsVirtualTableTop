import VulnerabilityClassifier from './VulnerabilityClassifier';

describe('VulnerabilityClassifier - Supporting BDD Security Categorization', () => {
  let classifier;
  
  beforeEach(() => {
    classifier = new VulnerabilityClassifier();
  });

  describe('Critical Vulnerability Classification - Supporting BDD Critical Resolution', () => {
    test('should classify vulnerabilities with CVSS score >= 9.0 as critical', () => {
      const vulnerability = {
        severity: 'critical',
        cvss: { score: 9.5 }
      };
      
      const isCritical = classifier.isCritical(vulnerability);
      
      expect(isCritical).toBe(true);
    });

    test('should identify critical vulnerabilities requiring immediate attention', () => {
      const criticalVulns = [
        { name: 'shell-quote', severity: 'critical', cvss: { score: 9.8 } },
        { name: 'babel-traverse', severity: 'critical', cvss: { score: 9.2 } }
      ];
      
      const criticalCount = classifier.countCriticalVulnerabilities(criticalVulns);
      const needsImmediateAction = classifier.requiresImmediateAction(criticalVulns);
      
      expect(criticalCount).toBe(2);
      expect(needsImmediateAction).toBe(true);
    });

    test('should prioritize critical vulnerabilities for remediation order', () => {
      const vulnerabilities = [
        { name: 'low-vuln', severity: 'low', cvss: { score: 2.1 } },
        { name: 'critical-vuln', severity: 'critical', cvss: { score: 9.8 } },
        { name: 'moderate-vuln', severity: 'moderate', cvss: { score: 5.5 } }
      ];
      
      const prioritized = classifier.prioritizeByRisk(vulnerabilities);
      
      expect(prioritized[0].severity).toBe('critical');
      expect(prioritized[0].name).toBe('critical-vuln');
    });
  });

  describe('High Severity Classification - Supporting BDD High Resolution', () => {
    test('should classify vulnerabilities with CVSS 7.0-8.9 as high severity', () => {
      const vulnerability = {
        severity: 'high',
        cvss: { score: 8.2 }
      };
      
      const isHigh = classifier.isHighSeverity(vulnerability);
      
      expect(isHigh).toBe(true);
    });

    test('should identify high severity vulnerabilities in development dependencies', () => {
      const devDependencyVuln = {
        name: 'webpack-dev-server',
        severity: 'high',
        cvss: { score: 7.4 },
        isDevelopmentDependency: true
      };
      
      const isHighDevVuln = classifier.isHighSeverityDevelopmentVulnerability(devDependencyVuln);
      
      expect(isHighDevVuln).toBe(true);
    });

    test('should calculate risk score for high severity vulnerabilities', () => {
      const highVulnerability = {
        severity: 'high',
        cvss: { score: 8.1 },
        exploitabilityScore: 7.5,
        impactScore: 8.8
      };
      
      const riskScore = classifier.calculateRiskScore(highVulnerability);
      
      expect(riskScore).toBeGreaterThan(7.0);
      expect(riskScore).toBeLessThan(9.0);
    });
  });

  describe('Moderate Vulnerability Management - Supporting BDD Moderate Assessment', () => {
    test('should identify moderate vulnerabilities suitable for documentation', () => {
      const moderateVuln = {
        name: 'postcss',
        severity: 'moderate',
        cvss: { score: 5.3 },
        isDevelopmentDependency: true,
        hasWorkaround: true
      };
      
      const canBeDocumented = classifier.canBeDocumentedAsAcceptableRisk(moderateVuln);
      
      expect(canBeDocumented).toBe(true);
    });

    test('should calculate acceptable risk threshold for moderate vulnerabilities', () => {
      const moderateVulnerabilities = [
        { severity: 'moderate', cvss: { score: 4.5 }, isDevelopmentDependency: true },
        { severity: 'moderate', cvss: { score: 6.2 }, isDevelopmentDependency: false },
        { severity: 'moderate', cvss: { score: 5.8 }, isDevelopmentDependency: true }
      ];
      
      const acceptableCount = classifier.calculateAcceptableModerateCount(moderateVulnerabilities);
      
      expect(acceptableCount).toBeGreaterThan(0);
      expect(acceptableCount).toBeLessThanOrEqual(moderateVulnerabilities.length);
    });

    test('should determine which moderate vulnerabilities require resolution vs documentation', () => {
      const moderateVulnerabilities = [
        { 
          name: 'dev-tool', 
          severity: 'moderate', 
          cvss: { score: 4.1 }, 
          isDevelopmentDependency: true,
          hasActiveExploit: false
        },
        { 
          name: 'prod-lib', 
          severity: 'moderate', 
          cvss: { score: 6.8 }, 
          isDevelopmentDependency: false,
          hasActiveExploit: true
        }
      ];
      
      const classification = classifier.classifyModerateVulnerabilities(moderateVulnerabilities);
      
      expect(classification.requiresResolution).toHaveLength(1);
      expect(classification.canBeDocumented).toHaveLength(1);
      expect(classification.requiresResolution[0].name).toBe('prod-lib');
    });
  });

  describe('Low Priority Management - Supporting BDD Low Risk Assessment', () => {
    test('should identify low priority vulnerabilities suitable for deferral', () => {
      const lowVuln = {
        name: 'test-utility',
        severity: 'low',
        cvss: { score: 2.8 },
        isDevelopmentDependency: true,
        affectsProduction: false
      };
      
      const canBeDeferred = classifier.canBeDeferredWithDocumentation(lowVuln);
      
      expect(canBeDeferred).toBe(true);
    });

    test('should calculate business impact for low severity vulnerabilities', () => {
      const lowVulnerabilities = [
        { severity: 'low', cvss: { score: 3.1 }, affectsProduction: false },
        { severity: 'low', cvss: { score: 2.4 }, affectsProduction: false }
      ];
      
      const businessImpact = classifier.assessBusinessImpact(lowVulnerabilities);
      
      expect(businessImpact.riskLevel).toBe('low');
      expect(businessImpact.requiresImmediateAction).toBe(false);
    });
  });

  describe('Dependency Type Analysis - Supporting BDD Context-Aware Assessment', () => {
    test('should differentiate production vs development dependency vulnerabilities', () => {
      const prodVuln = {
        name: 'react',
        severity: 'high',
        isDevelopmentDependency: false
      };
      
      const devVuln = {
        name: 'jest',
        severity: 'high',
        isDevelopmentDependency: true
      };
      
      expect(classifier.isProductionVulnerability(prodVuln)).toBe(true);
      expect(classifier.isProductionVulnerability(devVuln)).toBe(false);
      expect(classifier.isDevelopmentOnlyVulnerability(devVuln)).toBe(true);
    });

    test('should assess runtime vs build-time vulnerability impact', () => {
      const runtimeVuln = {
        name: 'lodash',
        severity: 'moderate',
        affectsRuntime: true,
        affectsBuildTime: false
      };
      
      const buildTimeVuln = {
        name: 'webpack',
        severity: 'moderate',
        affectsRuntime: false,
        affectsBuildTime: true
      };
      
      const runtimeRisk = classifier.assessRuntimeRisk(runtimeVuln);
      const buildTimeRisk = classifier.assessBuildTimeRisk(buildTimeVuln);
      
      expect(runtimeRisk).toBeGreaterThan(buildTimeRisk);
    });
  });

  describe('Remediation Strategy - Supporting BDD Fix Planning', () => {
    test('should recommend automatic fix for low-risk vulnerabilities', () => {
      const autoFixableVuln = {
        name: 'simple-dep',
        severity: 'moderate',
        hasAutomaticFix: true,
        breakingChange: false
      };
      
      const strategy = classifier.recommendRemediationStrategy(autoFixableVuln);
      
      expect(strategy.type).toBe('automatic');
      expect(strategy.command).toBe('npm audit fix');
    });

    test('should recommend manual fix for complex vulnerabilities', () => {
      const complexVuln = {
        name: 'react-scripts',
        severity: 'high',
        hasAutomaticFix: false,
        requiresManualUpdate: true,
        breakingChange: true
      };
      
      const strategy = classifier.recommendRemediationStrategy(complexVuln);
      
      expect(strategy.type).toBe('manual');
      expect(strategy.requiresTesting).toBe(true);
    });

    test('should recommend documentation for acceptable risk vulnerabilities', () => {
      const documentableVuln = {
        name: 'dev-server',
        severity: 'moderate',
        isDevelopmentDependency: true,
        hasWorkaround: true,
        businessImpact: 'low'
      };
      
      const strategy = classifier.recommendRemediationStrategy(documentableVuln);
      
      expect(strategy.type).toBe('document');
      expect(strategy.requiresRiskAssessment).toBe(true);
    });
  });
});