/**
 * VulnerabilityClassifier - Classifies and prioritizes security vulnerabilities
 * Supports BDD security scenarios by providing business-focused vulnerability categorization
 */
class VulnerabilityClassifier {
  constructor() {
    this.riskThresholds = {
      critical: 9.0,
      high: 7.0,
      moderate: 4.0,
      low: 0.1
    };
  }

  /**
   * Determines if a vulnerability is critical severity
   * Supporting BDD: Critical vulnerability identification
   */
  isCritical(vulnerability) {
    return vulnerability.severity === 'critical' || 
           (vulnerability.cvss?.score >= this.riskThresholds.critical);
  }

  /**
   * Counts critical vulnerabilities requiring immediate attention
   * Supporting BDD: "Given the application has critical security vulnerabilities"
   */
  countCriticalVulnerabilities(vulnerabilities) {
    return vulnerabilities.filter(vuln => this.isCritical(vuln)).length;
  }

  /**
   * Determines if vulnerabilities require immediate action
   * Supporting BDD: Critical vulnerability urgency assessment
   */
  requiresImmediateAction(vulnerabilities) {
    return vulnerabilities.some(vuln => this.isCritical(vuln));
  }

  /**
   * Prioritizes vulnerabilities by risk for remediation order
   * Supporting BDD: Strategic remediation planning
   */
  prioritizeByRisk(vulnerabilities) {
    return vulnerabilities.sort((a, b) => {
      // Priority order: critical > high > moderate > low
      const severityOrder = { critical: 4, high: 3, moderate: 2, low: 1 };
      const aPriority = severityOrder[a.severity] || 0;
      const bPriority = severityOrder[b.severity] || 0;
      
      if (aPriority !== bPriority) {
        return bPriority - aPriority; // Higher priority first
      }
      
      // Within same severity, sort by CVSS score
      const aScore = a.cvss?.score || 0;
      const bScore = b.cvss?.score || 0;
      return bScore - aScore;
    });
  }

  /**
   * Determines if vulnerability is high severity
   * Supporting BDD: "Given the application has high severity security vulnerabilities"
   */
  isHighSeverity(vulnerability) {
    return vulnerability.severity === 'high' || 
           (vulnerability.cvss?.score >= this.riskThresholds.high && 
            vulnerability.cvss?.score < this.riskThresholds.critical);
  }

  /**
   * Identifies high severity vulnerabilities in development dependencies
   * Supporting BDD: Context-aware vulnerability assessment
   */
  isHighSeverityDevelopmentVulnerability(vulnerability) {
    return this.isHighSeverity(vulnerability) && vulnerability.isDevelopmentDependency;
  }

  /**
   * Calculates comprehensive risk score for vulnerability
   * Supporting BDD: Risk-based prioritization
   */
  calculateRiskScore(vulnerability) {
    let baseScore = vulnerability.cvss?.score || 0;
    
    // Adjust score based on context
    if (vulnerability.isDevelopmentDependency) {
      baseScore *= 0.7; // Reduce risk for dev dependencies
    }
    
    if (vulnerability.exploitabilityScore) {
      baseScore = (baseScore + vulnerability.exploitabilityScore) / 2;
    }
    
    if (vulnerability.impactScore) {
      baseScore = (baseScore + vulnerability.impactScore) / 2;
    }
    
    return Math.round(baseScore * 10) / 10; // Round to 1 decimal place
  }

  /**
   * Determines if moderate vulnerability can be documented as acceptable risk
   * Supporting BDD: "Then moderate vulnerabilities are either resolved or documented"
   */
  canBeDocumentedAsAcceptableRisk(vulnerability) {
    return vulnerability.severity === 'moderate' &&
           vulnerability.isDevelopmentDependency &&
           !vulnerability.hasActiveExploit &&
           (vulnerability.hasWorkaround || vulnerability.businessImpact === 'low' || vulnerability.cvss?.score < 5.0);
  }

  /**
   * Calculates acceptable count of moderate vulnerabilities for documentation
   * Supporting BDD: Moderate vulnerability threshold management
   */
  calculateAcceptableModerateCount(moderateVulnerabilities) {
    const devOnlyCount = moderateVulnerabilities.filter(v => 
      v.isDevelopmentDependency && !v.hasActiveExploit
    ).length;
    
    // Allow up to 50% of dev-only moderate vulnerabilities to be documented
    return Math.floor(devOnlyCount * 0.5);
  }

  /**
   * Classifies moderate vulnerabilities into resolution vs documentation categories
   * Supporting BDD: Strategic moderate vulnerability management
   */
  classifyModerateVulnerabilities(moderateVulnerabilities) {
    const classification = {
      requiresResolution: [],
      canBeDocumented: []
    };
    
    moderateVulnerabilities.forEach(vuln => {
      if (vuln.hasActiveExploit || !vuln.isDevelopmentDependency) {
        classification.requiresResolution.push(vuln);
      } else if (this.canBeDocumentedAsAcceptableRisk(vuln)) {
        classification.canBeDocumented.push(vuln);
      } else {
        classification.requiresResolution.push(vuln);
      }
    });
    
    return classification;
  }

  /**
   * Determines if low priority vulnerability can be deferred with documentation
   * Supporting BDD: "Given the application has low priority security vulnerabilities"
   */
  canBeDeferredWithDocumentation(vulnerability) {
    return vulnerability.severity === 'low' &&
           vulnerability.isDevelopmentDependency &&
           !vulnerability.affectsProduction;
  }

  /**
   * Assesses business impact of low severity vulnerabilities
   * Supporting BDD: Business impact assessment for low risk items
   */
  assessBusinessImpact(lowVulnerabilities) {
    const productionAffecting = lowVulnerabilities.filter(v => v.affectsProduction);
    
    return {
      riskLevel: productionAffecting.length > 0 ? 'medium' : 'low',
      requiresImmediateAction: false,
      recommendedTimeframe: '90 days',
      businessImpact: productionAffecting.length > 0 ? 
        'Some production impact possible' : 'Development environment only'
    };
  }

  /**
   * Identifies production vs development dependency vulnerabilities
   * Supporting BDD: Context-aware vulnerability assessment
   */
  isProductionVulnerability(vulnerability) {
    return !vulnerability.isDevelopmentDependency;
  }

  /**
   * Identifies development-only vulnerabilities
   * Supporting BDD: Development dependency risk assessment
   */
  isDevelopmentOnlyVulnerability(vulnerability) {
    return vulnerability.isDevelopmentDependency;
  }

  /**
   * Assesses runtime risk for vulnerabilities
   * Supporting BDD: Runtime impact assessment
   */
  assessRuntimeRisk(vulnerability) {
    let riskScore = vulnerability.cvss?.score || 0;
    
    if (vulnerability.affectsRuntime) {
      riskScore *= 1.5; // Increase risk for runtime vulnerabilities
    }
    
    if (!vulnerability.isDevelopmentDependency) {
      riskScore *= 1.3; // Increase risk for production dependencies
    }
    
    return Math.max(1, Math.round(riskScore * 10) / 10); // Ensure minimum score of 1
  }

  /**
   * Assesses build-time risk for vulnerabilities
   * Supporting BDD: Build process impact assessment
   */
  assessBuildTimeRisk(vulnerability) {
    let riskScore = vulnerability.cvss?.score || 0;
    
    if (vulnerability.affectsBuildTime && vulnerability.isDevelopmentDependency) {
      riskScore *= 0.8; // Slightly reduce risk for build-only dev dependencies
    }
    
    return Math.round(riskScore * 10) / 10;
  }

  /**
   * Recommends remediation strategy based on vulnerability characteristics
   * Supporting BDD: Strategic remediation planning
   */
  recommendRemediationStrategy(vulnerability) {
    if (this.isCritical(vulnerability)) {
      return {
        type: 'immediate',
        priority: 'critical',
        timeframe: '24 hours',
        command: vulnerability.hasAutomaticFix ? 'npm audit fix --force' : 'manual update required'
      };
    }
    
    if (this.isHighSeverity(vulnerability)) {
      return {
        type: vulnerability.breakingChange ? 'manual' : 'automatic',
        priority: 'high',
        timeframe: '7 days',
        command: vulnerability.hasAutomaticFix ? 'npm audit fix' : 'manual update required',
        requiresTesting: vulnerability.breakingChange
      };
    }
    
    if (vulnerability.severity === 'moderate') {
      if (this.canBeDocumentedAsAcceptableRisk(vulnerability)) {
        return {
          type: 'document',
          priority: 'low',
          timeframe: '30 days',
          requiresRiskAssessment: true
        };
      } else {
        return {
          type: 'automatic',
          priority: 'medium',
          timeframe: '14 days',
          command: 'npm audit fix'
        };
      }
    }
    
    // Low severity
    return {
      type: 'document',
      priority: 'low',
      timeframe: '90 days',
      requiresRiskAssessment: true
    };
  }
}

export default VulnerabilityClassifier;