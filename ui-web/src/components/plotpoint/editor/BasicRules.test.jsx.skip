import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import BasicRules from './BasicRules';

describe('BasicRules Component', () => {
  const defaultProps = {
    rules: {
      bloodAndGuts: false,
      bornAHero: false,
      criticalFailures: false,
      fanatics: false,
      grittyDamage: false,
      heroesNeverDie: false,
      highAdventure: false,
      jokersWild: false,
      multipleLanguages: false,
      noPowerPoints: false,
      skillSpecialization: false
    },
    onChange: jest.fn()
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('Rendering', () => {
    it('should render the component with title', () => {
      render(<BasicRules {...defaultProps} />);
      
      expect(screen.getByText('Basic Rules')).toBeInTheDocument();
    });

    it('should render all rule checkboxes', () => {
      render(<BasicRules {...defaultProps} />);
      
      expect(screen.getByLabelText('Blood & Guts')).toBeInTheDocument();
      expect(screen.getByLabelText('Born a Hero')).toBeInTheDocument();
      expect(screen.getByLabelText('Critical Failures')).toBeInTheDocument();
      expect(screen.getByLabelText('Fanatics')).toBeInTheDocument();
      expect(screen.getByLabelText('Gritty Damage')).toBeInTheDocument();
      expect(screen.getByLabelText('Heroes Never Die')).toBeInTheDocument();
      expect(screen.getByLabelText('High Adventure')).toBeInTheDocument();
      expect(screen.getByLabelText("Joker's Wild")).toBeInTheDocument();
      expect(screen.getByLabelText('Multiple Languages')).toBeInTheDocument();
      expect(screen.getByLabelText('No Power Points')).toBeInTheDocument();
      expect(screen.getByLabelText('Skill Specialization')).toBeInTheDocument();
    });

    it('should render with all checkboxes unchecked by default', () => {
      render(<BasicRules {...defaultProps} />);
      
      const checkboxes = screen.getAllByRole('checkbox');
      checkboxes.forEach(checkbox => {
        expect(checkbox).not.toBeChecked();
      });
    });

    it('should render with specific rules checked', () => {
      const props = {
        ...defaultProps,
        rules: {
          ...defaultProps.rules,
          bloodAndGuts: true,
          bornAHero: true,
          jokersWild: true
        }
      };
      
      render(<BasicRules {...props} />);
      
      expect(screen.getByLabelText('Blood & Guts')).toBeChecked();
      expect(screen.getByLabelText('Born a Hero')).toBeChecked();
      expect(screen.getByLabelText("Joker's Wild")).toBeChecked();
      expect(screen.getByLabelText('Critical Failures')).not.toBeChecked();
    });
  });

  describe('User Interactions', () => {
    it('should handle checkbox changes', () => {
      const onChange = jest.fn();
      render(<BasicRules {...defaultProps} onChange={onChange} />);
      
      const bloodAndGutsCheckbox = screen.getByLabelText('Blood & Guts');
      fireEvent.click(bloodAndGutsCheckbox);
      
      expect(onChange).toHaveBeenCalledTimes(1);
      expect(onChange).toHaveBeenCalledWith({
        ...defaultProps.rules,
        bloodAndGuts: true
      });
    });

    it('should toggle checkbox states', () => {
      const onChange = jest.fn();
      const props = {
        ...defaultProps,
        rules: {
          ...defaultProps.rules,
          bornAHero: true
        },
        onChange
      };
      
      render(<BasicRules {...props} />);
      
      const bornAHeroCheckbox = screen.getByLabelText('Born a Hero');
      fireEvent.click(bornAHeroCheckbox);
      
      expect(onChange).toHaveBeenCalledWith({
        ...props.rules,
        bornAHero: false
      });
    });

    it('should handle multiple checkbox changes', () => {
      const onChange = jest.fn();
      render(<BasicRules {...defaultProps} onChange={onChange} />);
      
      fireEvent.click(screen.getByLabelText('Blood & Guts'));
      fireEvent.click(screen.getByLabelText('Critical Failures'));
      fireEvent.click(screen.getByLabelText('High Adventure'));
      
      expect(onChange).toHaveBeenCalledTimes(3);
      
      // Check first call
      expect(onChange).toHaveBeenNthCalledWith(1, {
        ...defaultProps.rules,
        bloodAndGuts: true
      });
      
      // Check second call
      expect(onChange).toHaveBeenNthCalledWith(2, {
        ...defaultProps.rules,
        criticalFailures: true
      });
      
      // Check third call
      expect(onChange).toHaveBeenNthCalledWith(3, {
        ...defaultProps.rules,
        highAdventure: true
      });
    });
  });

  describe('Props Validation', () => {
    it('should handle missing onChange handler', () => {
      const { container } = render(
        <BasicRules rules={defaultProps.rules} />
      );
      
      const checkbox = screen.getByLabelText('Blood & Guts');
      expect(() => fireEvent.click(checkbox)).not.toThrow();
    });

    it('should handle partial rules object', () => {
      const partialRules = {
        bloodAndGuts: true,
        bornAHero: false
        // Missing other properties
      };
      
      render(<BasicRules rules={partialRules} onChange={jest.fn()} />);
      
      expect(screen.getByLabelText('Blood & Guts')).toBeChecked();
      expect(screen.getByLabelText('Born a Hero')).not.toBeChecked();
      // Other checkboxes should handle undefined gracefully
      expect(screen.getByLabelText('Critical Failures')).not.toBeChecked();
    });

    it('should handle empty rules object', () => {
      render(<BasicRules rules={{}} onChange={jest.fn()} />);
      
      const checkboxes = screen.getAllByRole('checkbox');
      checkboxes.forEach(checkbox => {
        expect(checkbox).not.toBeChecked();
      });
    });
  });

  describe('Layout and Structure', () => {
    it('should render checkboxes in form-check structure', () => {
      const { container } = render(<BasicRules {...defaultProps} />);
      
      const formChecks = container.querySelectorAll('.form-check');
      expect(formChecks).toHaveLength(11); // 11 rules
      
      formChecks.forEach(formCheck => {
        expect(formCheck.querySelector('.form-check-input')).toBeInTheDocument();
        expect(formCheck.querySelector('.form-check-label')).toBeInTheDocument();
      });
    });

    it('should have proper Bootstrap classes', () => {
      const { container } = render(<BasicRules {...defaultProps} />);
      
      expect(container.querySelector('.card')).toBeInTheDocument();
      expect(container.querySelector('.card-header')).toBeInTheDocument();
      expect(container.querySelector('.card-body')).toBeInTheDocument();
    });

    it('should have proper accessibility attributes', () => {
      render(<BasicRules {...defaultProps} />);
      
      const checkboxes = screen.getAllByRole('checkbox');
      checkboxes.forEach(checkbox => {
        expect(checkbox).toHaveAttribute('type', 'checkbox');
        expect(checkbox).toHaveAttribute('id');
        
        const label = checkbox.closest('.form-check').querySelector('label');
        expect(label).toHaveAttribute('for', checkbox.id);
      });
    });
  });

  describe('All Rules Coverage', () => {
    const ruleTests = [
      { key: 'bloodAndGuts', label: 'Blood & Guts' },
      { key: 'bornAHero', label: 'Born a Hero' },
      { key: 'criticalFailures', label: 'Critical Failures' },
      { key: 'fanatics', label: 'Fanatics' },
      { key: 'grittyDamage', label: 'Gritty Damage' },
      { key: 'heroesNeverDie', label: 'Heroes Never Die' },
      { key: 'highAdventure', label: 'High Adventure' },
      { key: 'jokersWild', label: "Joker's Wild" },
      { key: 'multipleLanguages', label: 'Multiple Languages' },
      { key: 'noPowerPoints', label: 'No Power Points' },
      { key: 'skillSpecialization', label: 'Skill Specialization' }
    ];

    ruleTests.forEach(({ key, label }) => {
      it(`should handle ${label} rule correctly`, () => {
        const onChange = jest.fn();
        render(<BasicRules {...defaultProps} onChange={onChange} />);
        
        const checkbox = screen.getByLabelText(label);
        fireEvent.click(checkbox);
        
        expect(onChange).toHaveBeenCalledWith({
          ...defaultProps.rules,
          [key]: true
        });
      });
    });
  });
});